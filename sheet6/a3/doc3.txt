1.
a) One possible license key is "APPPP-0PPP0-00000-ONOAO-0110X". 

==============================================================================

b) The algorithm in "keygen.c" generates an arbritary number of valid serial numbers. It's used as follow:

./keygen <number of keys>

==============================================================================

c) One way to crack the game by patching is to change the code in order to ignore the license key checking. To do it, i first located the place where it starts to do the checking: At the address 0405000 it calls the "fopen" function to open the license file, and from there the checking begin. Next, I found where the checking finished: it's at the address 40523b. So, I simply overwrote the call instruction with a jump instruction (jmp 0x23A), so the program goes directly to the game without checking the license.

patchedLabrys.64 is the pacthed version.


==================================================================================================================


2-
a) To be able to walk thourgh walls, we can change the function collide from the wall. I tried out what each conditional jump did by changing them to the other conditional and by making it an unconditional jump, until I got what I wanted.

wallHack.64 is the version in which one is able to walk thourgh walls.

==============================================================================

b) To be able to fly throughout all the levels, i first tried to edit the "gravity" method. This didn't lead me anywhere, so I changed the plan and started messing with the "jump" method. I could make the player jump higher than before, and after that I needed only to make the player fall slower. So I went on the "save_state" method and edited it (the first "if"), and I was able to only go down when the player was pointing down.

flyHack.64 is the version in which one can fly throughout all the levels.

==============================================================================

c) To be able to run quicker in the game, I edited the second "if" in she "save_state" method.

speedHack.64 is the version in which one can walk quickly throughout all the levels.


==================================================================================================================


3- The first thing we need is to find out which function is vulnerable to the shell injection. I found that the methodo  level(int, camera *, sound *), which opens the files for the levels, has a function "getline". And this function calls "getc", but it never checks if the buffer size was extrapolated, so it's vulnerable. I found out how many bytes it could take (0x234, or 564 in decimal), and I overwrote the level 5's labyrinth with "A"*568 + '\x11\x11\x88\xff'. This means that the code that's be called is the one in the address 0xff888888. This is an arbritary address. To do the shellcode injection, I used an environment variable with the code I needed to execute. Because the memory is allocated dynamically, I can't be exactly sure of where the variable will be. For that reason, I just made an assumption that it is in the address 0xff888888 (which was in the end of the labyrinth file, to be executed). I can be either right or wrong in this assumption, and, to make my chances of getting to it, I used the idea of "NOP sled" with the environment variable.
The variable is the following:
export SHELLCODE=$(python -c 'print "\x90"*100000 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80"') 

I first print \x90 100.000 times, to make the NOP sled, and increase the chances of getting to the shellcode. Basically, if any of the "NOP" instructions are at the address that I assumed before (0xff888888), the CPUâ€™s instruction execution flow will "slide" down until the shellcode that I injected, and I'll be able to use a shell.
Then, to actually run  the exploit, I run the "labrys.32" executable a number of times (about 100 times should work), and open the 5th level, until I get access to a shell.